# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,5,10,93,8,10,10,10,12,10,96,9,10,1,11,
        1,11,1,12,1,12,1,13,4,13,103,8,13,11,13,12,13,104,1,13,1,13,1,14,
        4,14,110,8,14,11,14,12,14,111,1,15,1,15,5,15,116,8,15,10,15,12,15,
        119,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,3,20,138,8,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,3,21,150,8,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,4,24,160,8,24,11,24,12,24,161,1,24,1,24,1,25,
        1,25,3,25,168,8,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,1,0,5,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,0,48,57,
        1,0,49,57,183,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,56,1,0,0,0,5,58,1,0,0,0,7,
        60,1,0,0,0,9,62,1,0,0,0,11,64,1,0,0,0,13,69,1,0,0,0,15,75,1,0,0,
        0,17,80,1,0,0,0,19,84,1,0,0,0,21,90,1,0,0,0,23,97,1,0,0,0,25,99,
        1,0,0,0,27,102,1,0,0,0,29,109,1,0,0,0,31,113,1,0,0,0,33,120,1,0,
        0,0,35,122,1,0,0,0,37,124,1,0,0,0,39,126,1,0,0,0,41,137,1,0,0,0,
        43,149,1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,49,157,1,0,0,0,51,167,
        1,0,0,0,53,54,5,105,0,0,54,55,5,102,0,0,55,2,1,0,0,0,56,57,5,40,
        0,0,57,4,1,0,0,0,58,59,5,41,0,0,59,6,1,0,0,0,60,61,5,123,0,0,61,
        8,1,0,0,0,62,63,5,125,0,0,63,10,1,0,0,0,64,65,5,101,0,0,65,66,5,
        108,0,0,66,67,5,115,0,0,67,68,5,101,0,0,68,12,1,0,0,0,69,70,5,119,
        0,0,70,71,5,104,0,0,71,72,5,105,0,0,72,73,5,108,0,0,73,74,5,101,
        0,0,74,14,1,0,0,0,75,76,5,99,0,0,76,77,5,104,0,0,77,78,5,97,0,0,
        78,79,5,114,0,0,79,16,1,0,0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,
        83,5,116,0,0,83,18,1,0,0,0,84,85,5,102,0,0,85,86,5,108,0,0,86,87,
        5,111,0,0,87,88,5,97,0,0,88,89,5,116,0,0,89,20,1,0,0,0,90,94,7,0,
        0,0,91,93,7,1,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,
        1,0,0,0,95,22,1,0,0,0,96,94,1,0,0,0,97,98,5,59,0,0,98,24,1,0,0,0,
        99,100,5,44,0,0,100,26,1,0,0,0,101,103,7,2,0,0,102,101,1,0,0,0,103,
        104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,
        107,6,13,0,0,107,28,1,0,0,0,108,110,7,3,0,0,109,108,1,0,0,0,110,
        111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,30,1,0,0,0,113,117,
        7,4,0,0,114,116,7,3,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,
        1,0,0,0,117,118,1,0,0,0,118,32,1,0,0,0,119,117,1,0,0,0,120,121,5,
        43,0,0,121,34,1,0,0,0,122,123,5,45,0,0,123,36,1,0,0,0,124,125,5,
        42,0,0,125,38,1,0,0,0,126,127,5,47,0,0,127,40,1,0,0,0,128,138,5,
        61,0,0,129,130,5,43,0,0,130,138,5,61,0,0,131,132,5,45,0,0,132,138,
        5,61,0,0,133,134,5,42,0,0,134,138,5,61,0,0,135,136,5,47,0,0,136,
        138,5,61,0,0,137,128,1,0,0,0,137,129,1,0,0,0,137,131,1,0,0,0,137,
        133,1,0,0,0,137,135,1,0,0,0,138,42,1,0,0,0,139,140,5,61,0,0,140,
        150,5,61,0,0,141,142,5,33,0,0,142,150,5,61,0,0,143,150,5,60,0,0,
        144,145,5,60,0,0,145,150,5,61,0,0,146,150,5,62,0,0,147,148,5,62,
        0,0,148,150,5,61,0,0,149,139,1,0,0,0,149,141,1,0,0,0,149,143,1,0,
        0,0,149,144,1,0,0,0,149,146,1,0,0,0,149,147,1,0,0,0,150,44,1,0,0,
        0,151,152,5,43,0,0,152,153,5,43,0,0,153,46,1,0,0,0,154,155,5,45,
        0,0,155,156,5,45,0,0,156,48,1,0,0,0,157,159,5,91,0,0,158,160,3,31,
        15,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,
        0,0,162,163,1,0,0,0,163,164,5,93,0,0,164,50,1,0,0,0,165,168,3,17,
        8,0,166,168,3,19,9,0,167,165,1,0,0,0,167,166,1,0,0,0,168,52,1,0,
        0,0,9,0,94,104,111,117,137,149,161,167,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    CHAR_TYPE = 8
    INT_TYPE = 9
    FLOAT_TYPE = 10
    IdentVarSimples = 11
    SEMICOLON = 12
    COMMA = 13
    WS = 14
    NUMBER = 15
    NUMBER_NOT_ZERO = 16
    ADD_OP = 17
    SUB_OP = 18
    MUL_OP = 19
    DIV_OP = 20
    OPERADOR_ATRIBUICAO = 21
    OPERADOR_RELACIONAL = 22
    INCREMENTO = 23
    DECREMENTO = 24
    ARRAY_DECLARATION = 25
    TipoSimples = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'('", "')'", "'{'", "'}'", "'else'", "'while'", "'char'", 
            "'int'", "'float'", "';'", "','", "'+'", "'-'", "'*'", "'/'", 
            "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "CHAR_TYPE", "INT_TYPE", "FLOAT_TYPE", "IdentVarSimples", "SEMICOLON", 
            "COMMA", "WS", "NUMBER", "NUMBER_NOT_ZERO", "ADD_OP", "SUB_OP", 
            "MUL_OP", "DIV_OP", "OPERADOR_ATRIBUICAO", "OPERADOR_RELACIONAL", 
            "INCREMENTO", "DECREMENTO", "ARRAY_DECLARATION", "TipoSimples" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "CHAR_TYPE", "INT_TYPE", "FLOAT_TYPE", "IdentVarSimples", 
                  "SEMICOLON", "COMMA", "WS", "NUMBER", "NUMBER_NOT_ZERO", 
                  "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "OPERADOR_ATRIBUICAO", 
                  "OPERADOR_RELACIONAL", "INCREMENTO", "DECREMENTO", "ARRAY_DECLARATION", 
                  "TipoSimples" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


